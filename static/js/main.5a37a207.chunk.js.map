{"version":3,"sources":["models/DrawModels.ts","components/PencilButton.tsx","components/PanZoomButton.tsx","components/EraserButton.tsx","actions/Actions.ts","components/CanvasToolbar.tsx","components/Curve.tsx","components/Figure.tsx","components/DrawingCanvas.tsx","components/SmoothEnhancement.tsx","components/PredictEnhancement.tsx","components/EnhancementTabs.tsx","components/App.tsx","reducers/InkDrawSmoothReducer.ts","reducers/Reducers.ts","models/PredictModels.ts","api/InputTools.ts","sagas/StartAppSaga.ts","sagas/RootSaga.ts","services/Store.ts","index.tsx"],"names":["CanvasToolbarSelection","PencilButton","props","active","className","id","aria-label","aria-selected","role","title","onClick","xmlns","viewBox","width","height","fill","color","points","d","PanZoomButton","version","x","y","EraserButton","gradientUnits","x1","y1","x2","y2","gradientTransform","offset","stopColor","stopOpacity","PredictionAction","CanvasAction","ApplicationAction","initialCanvas","smoothWindow","toolSelected","None","inkDraw","committedPoints","projectedPoints","smoothFactor","smoothingBuffer","startedAt","tracking","figures","Array","figureIdentifier","CanvasToolbar","visibility","currentTool","Black","selectTool","Red","Green","Blue","Curve","m","model","path","pathPoints","map","p","i","pathChar","toFixed","join","stroke","strokeColor","strokeWidth","Figure","curves","c","key","DrawingCanvas","boundRef","useRef","getMousePosition","e","bounds","current","rect","getBoundingClientRect","pageX","left","pageY","top","style","overflow","ref","aria-hidden","onMouseDown","mouseHandler","MouseDown","onMouseMove","MouseMove","onMouseUp","MouseUp","cx","cy","r","f","SmoothEnhancement","Fragment","htmlFor","value","onChange","smoothWindowChanged","parseInt","target","PredictEnhancement","predictions","slice","s","EnhancementTabs","onTabClick","tabName","tabContent","document","getElementsByClassName","length","setAttribute","tabLinks","replace","getElementById","currentTarget","canvasMsg","name","type","payload","predictionMsg","applicationMsg","App","React","useState","setSmoothWindow","useSelector","state","canvas","quickDraw","topMatches","dispatch","useDispatch","isStarted","useEffect","StartApplication","CanvasMouseDown","point","CanvasMouseMove","CanvasMouseUp","tool","ToolSelected","n","InkDrawSmoothReducer","appendToSmoothingBuffer","buffer","timespan","Date","now","shift","getAveragePoint","smoothCount","pt","totalX","totalY","totalTime","count","updateVisiblePoints","extrapolated","push","mouseDown","mouseMove","mouseUp","_","predictionsReducer","action","QuickDrawPredictionReceived","isPen","penColor","lastFigure","pop","curve","toString","startNewCurve","updateRecentCurveWithInkDrawing","lastCurve","canvasReducer","events","newTool","curveTimes","figure","CurveCompleted","figureId","curveId","initialState","basicShape","shape","inkPayload","input_type","requests","language","writing_guide","ink","v","fetchQuickDrawSuggestions","fetch","method","headers","body","JSON","stringify","curveCompleted","startApplicationSaga","figureById","find","select","then","json","response","put","takeEvery","rootSaga","sagaMiddle","createSagaMiddleware","sagaEnhancer","applyMiddleware","asyncDispatchEnhancer","store","next","syncActivityFinished","actionQueue","flushQueue","forEach","a","actionWithAsyncDispatch","Object","assign","asyncDispatch","actions","concat","result","enhancers","composedEnhancers","compose","createStore","newVar","run","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5a37a207.chunk.js","sourcesContent":["export interface Point {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport interface TemporalPoint extends Point {\r\n    timespan: number;\r\n}\r\n\r\n\r\nexport interface Curve {\r\n    id: string\r\n    strokeWidth: number | string\r\n    strokeColor: string\r\n    startedAt: number\r\n    pathPoints: TemporalPoint[]\r\n}\r\n\r\nexport interface Figure {\r\n    id: string\r\n    offset: Point\r\n    curves: Curve[]\r\n    curveTimes: number[]\r\n}\r\n\r\nexport interface InkDraw{\r\n    smoothingBuffer: TemporalPoint[]\r\n\r\n    /**\r\n     * Points that are already part of the curve and will not change.\r\n     */\r\n    committedPoints: TemporalPoint[]\r\n\r\n    /**\r\n     * Projected points\r\n     */\r\n    projectedPoints: TemporalPoint[]\r\n\r\n    /**\r\n     * time when this ink was started to draw\r\n     */\r\n    startedAt: number\r\n    smoothFactor: number\r\n    tracking: boolean\r\n}\r\n\r\nconst DefaultInkDraw: InkDraw = {\r\n    committedPoints: [],\r\n    projectedPoints: [],\r\n    smoothFactor: 1,\r\n    smoothingBuffer: [],\r\n    startedAt: 0,\r\n    tracking: false\r\n}\r\n\r\nexport enum CanvasToolbarSelection {\r\n    None,\r\n    PanZoom,\r\n    Black,\r\n    Red,\r\n    Green,\r\n    Blue,\r\n    Eraser\r\n}\r\n\r\nexport interface Canvas {\r\n    smoothWindow: number\r\n    toolSelected: CanvasToolbarSelection\r\n    inkDraw: InkDraw\r\n    figures: Figure[]\r\n    figureIdentifier: number\r\n}\r\n\r\nexport const initialCanvas: Canvas = {\r\n    smoothWindow: 1,\r\n    toolSelected: CanvasToolbarSelection.None,\r\n    inkDraw: DefaultInkDraw,\r\n    figures: new Array<Figure>(),\r\n    figureIdentifier:  1\r\n}","import React from 'react';\r\n\r\nexport interface Props {\r\n    color: string\r\n    active: boolean\r\n    onClick: () => void\r\n  }\r\n  \r\n\r\nconst PencilButton: React.FC<Props> = (props) => {\r\n    const active =  props.active ? \" activePen\" : \"\";\r\n    return (\r\n<button \r\n    className={\"chrome-Button pen embedded\" + active}\r\n    id=\"red\" \r\n    aria-label=\"Content Creation Toolbar - Ink Red Pen\" \r\n    aria-selected='false' \r\n    role=\"tab\" \r\n    title=\"{props.color} Pen\"\r\n    onClick={props.onClick}>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -8 96 96\">\r\n        <g>\r\n            <rect className=\"pen-0\" width=\"96\" height=\"96\"></rect>\r\n            <g>\r\n                <g>\r\n                    <polygon fill={props.color} points=\"68.004 96 28 96 29.004 58 67.004 58 68.004 96\"></polygon>\r\n                </g>\r\n                <g>\r\n                    <path fill={props.color} d=\"M55,14C52,4,50,0,47.999,0,46,0,44,4,41,14l.00287,2H54.99713Z\"></path>\r\n                </g>\r\n                <g>\r\n                    <path className=\"pen-1\" d=\"M57.00287,16l-2-2h-14l-2,2s-9.16663,22.33325-10,42L29,60H67.00287V58C66.16949,38.33325,57.00287,16,57.00287,16Z\"></path>\r\n                </g>\r\n            </g>\r\n            <g>\r\n                <polygon className=\"pen-2\" points=\"36 59 36 96 60 96 60 59 36 59\"></polygon>\r\n                <polygon className=\"pen-3\" points=\"41 15 38 59 58 59 55 15 41 15\"></polygon>\r\n            </g>\r\n            <g>\r\n                <polygon points=\"29.004 58 28 96 30.001 96 30.952 60 65.056 60 66.003 96 68.004 96 67.004 58 29.004 58\"></polygon>\r\n                <path d=\"M47.999,2c.06757,0,.346.15382.645.649l.03763.0623.04206.05941c.0536.07572,1.3214,\r\n                    1.92808,4.1846,11.22925H43.09171C45.956,4.69527,47.22008,2.84621,47.27344,2.77076l.04318-.06067.03855-.06371C47.65355,\r\n                    2.15319,47.93148,2,47.999,2m0-2a2.88457,2.88457,0,0,0-2.355,1.61108C45.383,1.97778,43.97986,4.22339,41,14l.00287,\r\n                    2H54.99713L55,14C52.03259,4.264,50.62592,1.99634,50.356,1.61511A2.88666,2.88666,0,0,0,47.999,0Z\"></path>\r\n                <path d=\"M54.17445,16l1.12417,1.12418C56.46608,20.07411,64.22884,40.29125,65.001,\r\n                    58H31.00472c.77218-17.70875,8.53493-37.92589,9.7024-40.87582L41.83129,16H54.17445m.82842-2h-14l-2,2s-9.16663,\r\n                    22.33326-10,42L29,60H67.00287V58c-.83338-19.66674-10-42-10-42l-2-2Z\"></path>\r\n            </g>\r\n        </g>\r\n    </svg>\r\n</button>      \r\n    )\r\n }\r\n\r\n export default PencilButton;","import React from 'react';\r\n\r\nexport interface Props {\r\n}\r\n  \r\n\r\nconst PanZoomButton: React.FC<Props> = (props) => {\r\n    return (\r\n        <button id=\"enablePanzoom\" className=\"chrome-Button\" aria-label=\"Move canvas tool\" title=\"Move canvas tool\">\r\n            <svg className=\"enablePanzoomIcon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\">\r\n            <path d=\"M4.1,17.1l3.4,3.4L6,22l-6-6l6-6l1.5,1.5l-3.4,3.4h6.6v2.1H4.1z M32,16l-5.9,5.9l-1.5-1.5l3.3-3.3h-6.6v-2.1h6.6l-3.4-3.4\r\n                L26,10L32,16z M11.6,7.4l-1.5-1.5L16,0l6,6l-1.5,1.5l-3.4-3.4v6.6h-2.1V4.1L11.6,7.4z M20.5,24.5L22,26l-6,6l-6-6l1.5-1.5l3.4,3.4\r\n                v-6.6h2.1v6.6L20.5,24.5z\"></path>\r\n            </svg>\r\n        </button>    \r\n    )\r\n }\r\n\r\n export default PanZoomButton;","import React from 'react';\r\n\r\nexport interface Props {\r\n}\r\n  \r\n\r\nconst EraserButton: React.FC<Props> = (props) => {\r\n    return (\r\n        <button className=\"chrome-Button pen embedded\" id=\"erase\" aria-label=\"Content Creation Toolbar - Ink Eraser\" aria-selected=\"false\" role=\"tab\" title=\"Eraser\">\r\n            <svg version=\"1.1\" id=\"Eraser\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 -24 96 96\">\r\n                <rect className=\"eraser-0\" width=\"96\" height=\"96\"/>\r\n                <g>\r\n                    <path className=\"eraser-1\" d=\"M38,0h20c4.4,0,8,3.6,8,8v16H30V8C30,3.6,33.6,0,38,0z\"/>\r\n                    <rect x=\"28\" y=\"58\" className=\"eraser-2\" width=\"40\" height=\"38\"/>\r\n                    <polygon className=\"eraser-3\" points=\"30,22 66,22 68,24 68,60 28,60 28,24 \"/>\r\n                        <linearGradient id=\"barrel_highlight_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"36.1318\" y1=\"-1008.9948\" x2=\"60.0228\" y2=\"-1008.9948\" gradientTransform=\"matrix(1 0 0 -1 0 -931.9948)\">\r\n                            <stop offset=\"0.16\" stopColor=\"#FFFFFF\" stopOpacity=\"0\"/>\r\n                            <stop offset=\"0.5\" stopColor=\"#FFFFFF\" stopOpacity=\"0.7\"/>\r\n                            <stop offset=\"0.84\" stopColor=\"#FFFFFF\" stopOpacity=\"0\"/>\r\n                        </linearGradient>\r\n                    <polygon className=\"eraser-4\" points=\"48.2,58 48,58 36,58 36,96 48,96 48.2,96 60,96 60,58 \t\"/>\r\n                        <linearGradient id=\"metal_highlight_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"38.112\" y1=\"-972.9948\" x2=\"58.2844\" y2=\"-972.9948\" gradientTransform=\"matrix(1 0 0 -1 0 -931.9948)\">\r\n                            <stop offset=\"0.16\" stopColor=\"#FFFFFF\" stopOpacity=\"0\"/>\r\n                            <stop offset=\"0.5\" stopColor=\"#FFFFFF\"/>\r\n                            <stop offset=\"0.84\" stopColor=\"#FFFFFF\" stopOpacity=\"0\"/>\r\n                        </linearGradient>\r\n                    <polygon className=\"eraser-5\" points=\"48.2,22 48,22 36,22 36,60 48,60 48.2,60 60,60 60,22 \t\"/>\r\n                </g>\r\n                <path d=\"M66,22V8c0-4.4-3.6-8-8-8H38c-4.4,0-8,3.6-8,8v14l-2,2v72h2V60h36v36h2V24L66,22z M32,8c0-3.2,2.6-6,5.8-6H38\r\n                    h20c3.2,0,6,2.6,6,5.8V8v14H32V8z M30,58V24.8l0.8-0.8h34.4l0.8,0.8V58H30z\"/>\r\n            </svg>\r\n        </button>   \r\n    )\r\n }\r\n\r\n export default EraserButton;","import {CanvasToolbarSelection, Point} from \"../models/DrawModels\"\r\nimport {Action} from 'redux'\r\n\r\nexport type ActionMap<M extends { [index: string]: any }> = {\r\n    [Key in keyof M]: M[Key] extends Action\r\n        ? {\r\n            type: Key;\r\n        }\r\n        : {\r\n            type: Key;\r\n            payload: M[Key];\r\n        }\r\n};\r\n\r\nexport function createMsg<Obj extends { [index: string]: any }>() {\r\n    return function<Key extends keyof Obj>(\r\n        name: Key,\r\n        ...args: Obj[Key] extends undefined ? [] : [Obj[Key]]\r\n    ) {\r\n        if (args.length > 0) {\r\n            return { type: name, payload: args[0] };\r\n        }\r\n        return { type: name };\r\n    };\r\n}\r\n\r\n\r\nexport enum PredictionAction {\r\n    QuickDrawPredictionReceived = \"PREDICT_QUICKDRAW_RECEIVED\",\r\n    LookupBasicShape = \"LOOKUP_BASIC_SHAPE\"\r\n}\r\n\r\ntype PredictionMessages = {\r\n    [PredictionAction.QuickDrawPredictionReceived]: string[]\r\n    [PredictionAction.LookupBasicShape]: {}\r\n};\r\n\r\nexport enum CanvasAction {\r\n    ToolSelected = \"CANVAS_SET_TOOL\",\r\n    CanvasMouseDown = \"CANVAS_MOUSE_DOWN\",\r\n    CanvasMouseMove = \"CANVAS_MOUSE_MOVE\",\r\n    CanvasMouseUp = \"CANVAS_MOUSE_UP\",\r\n}\r\n\r\ntype CanvasMessages = {\r\n    [CanvasAction.ToolSelected]: { tool: CanvasToolbarSelection };\r\n    [CanvasAction.CanvasMouseDown]: { point: Point };\r\n    [CanvasAction.CanvasMouseMove]: { point: Point };\r\n    [CanvasAction.CanvasMouseUp]: { point: Point };\r\n};\r\n\r\nexport enum ApplicationAction {\r\n    StartApplication = \"APP_START\",\r\n    CurveCompleted = \"APP_CURVE_COMPLETED\"\r\n}\r\n\r\ntype ApplicationMessages = {\r\n    [ApplicationAction.StartApplication]: { };\r\n    [ApplicationAction.CurveCompleted]: { figureId: string, curveId: string};\r\n};\r\n\r\nexport type PredictionActions = ActionMap<PredictionMessages>[keyof ActionMap<PredictionMessages>];\r\nexport type CanvasActions = ActionMap<CanvasMessages>[keyof ActionMap<CanvasMessages>];\r\nexport type ApplicationActions = ActionMap<ApplicationMessages>[keyof ActionMap<ApplicationMessages>];\r\n\r\nexport const canvasMsg = createMsg<CanvasMessages>();\r\nexport const predictionMsg = createMsg<PredictionMessages>();\r\nexport const applicationMsg = createMsg<ApplicationMessages>();\r\n\r\nexport type AllActions = PredictionActions | CanvasActions | ApplicationActions\r\n\r\nexport interface HasInducedActions {\r\n    asyncDispatch(actions: Action[]): void;\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PencilButton from './PencilButton';\r\nimport PanZoomButton from './PanZoomButton';\r\nimport EraserButton from './EraserButton';\r\nimport {CanvasToolbarSelection} from \"../models/DrawModels\";\r\n\r\nexport interface Props {\r\n    currentTool: CanvasToolbarSelection\r\n    selectTool: (tool: CanvasToolbarSelection) => void\r\n\r\n}\r\n\r\nconst CanvasToolbar: React.FC<Props> = (props) => {\r\n    return (\r\n        <div id=\"chrome\" className=\"embedded\">\r\n            <svg className=\"svgDefs\" xmlns=\"http://www.w3.org/2000/svg\" visibility=\"hidden\">\r\n                <defs>\r\n                    <linearGradient id=\"pen-linear-gradient\" x1=\"36.1146\" y1=\"1057.5\" x2=\"60.0056\" y2=\"1057.5\" gradientTransform=\"translate(0 -980)\" gradientUnits=\"userSpaceOnUse\">\r\n                        <stop offset=\"0.2\" stopColor=\"#fff\" stopOpacity=\"0\"/>\r\n                        <stop offset=\"0.2048\" stopColor=\"#fff\" stopOpacity=\"0.00948\"/>\r\n                        <stop offset=\"0.2972\" stopColor=\"#fff\" stopOpacity=\"0.1775\"/>\r\n                        <stop offset=\"0.3805\" stopColor=\"#fff\" stopOpacity=\"0.2992\"/>\r\n                        <stop offset=\"0.4509\" stopColor=\"#fff\" stopOpacity=\"0.3734\"/>\r\n                        <stop offset=\"0.5\" stopColor=\"#fff\" stopOpacity=\"0.4\"/>\r\n                        <stop offset=\"0.5576\" stopColor=\"#fff\" stopOpacity=\"0.3835\"/>\r\n                        <stop offset=\"0.6177\" stopColor=\"#fff\" stopOpacity=\"0.3344\"/>\r\n                        <stop offset=\"0.679\" stopColor=\"#fff\" stopOpacity=\"0.2526\"/>\r\n                        <stop offset=\"0.7406\" stopColor=\"#fff\" stopOpacity=\"0.1388\"/>\r\n                        <stop offset=\"0.8\" stopColor=\"#fff\" stopOpacity=\"0\"/>\r\n                    </linearGradient>\r\n                    <linearGradient id=\"pen-linear-gradient-2\" x1=\"39.75\" y1=\"1017\" x2=\"56.5602\" y2=\"1017\" gradientTransform=\"translate(0 -980)\" gradientUnits=\"userSpaceOnUse\">\r\n                        <stop offset=\"0.16\" stopColor=\"#fff\" stopOpacity=\"0\"/>\r\n                        <stop offset=\"0.2179\" stopColor=\"#fff\" stopOpacity=\"0.2236\"/>\r\n                        <stop offset=\"0.2949\" stopColor=\"#fff\" stopOpacity=\"0.4965\"/>\r\n                        <stop offset=\"0.3645\" stopColor=\"#fff\" stopOpacity=\"0.7131\"/>\r\n                        <stop offset=\"0.424\" stopColor=\"#fff\" stopOpacity=\"0.8691\"/>\r\n                        <stop offset=\"0.4711\" stopColor=\"#fff\" stopOpacity=\"0.9648\"/>\r\n                        <stop offset=\"0.5\" stopColor=\"#fff\"/>\r\n                        <stop offset=\"0.5289\" stopColor=\"#fff\" stopOpacity=\"0.9648\"/>\r\n                        <stop offset=\"0.576\" stopColor=\"#fff\" stopOpacity=\"0.8691\"/>\r\n                        <stop offset=\"0.6355\" stopColor=\"#fff\" stopOpacity=\"0.7131\"/>\r\n                        <stop offset=\"0.7051\" stopColor=\"#fff\" stopOpacity=\"0.4965\"/>\r\n                        <stop offset=\"0.7821\" stopColor=\"#fff\" stopOpacity=\"0.2236\"/>\r\n                        <stop offset=\"0.84\" stopColor=\"#fff\" stopOpacity=\"0\"/>\r\n                    </linearGradient>\r\n                </defs>\r\n            </svg>\r\n\r\n            <div id=\"penCalloutToastContainer\" className=\"toastContainer\">\r\n                <div id=\"pens\" className=\"chromeContainer embedded\" role=\"tablist\">\r\n                    <PanZoomButton/>\r\n                    <PencilButton color=\"black\" active={props.currentTool === CanvasToolbarSelection.Black} onClick={() => props.selectTool(CanvasToolbarSelection.Black)}/>\r\n                    <PencilButton color=\"red\" active={props.currentTool === CanvasToolbarSelection.Red} onClick={() => props.selectTool(CanvasToolbarSelection.Red)}/>\r\n                    <PencilButton color=\"green\" active={props.currentTool === CanvasToolbarSelection.Green} onClick={() => props.selectTool(CanvasToolbarSelection.Green)}/>\r\n                    <PencilButton color=\"blue\" active={props.currentTool === CanvasToolbarSelection.Blue} onClick={() => props.selectTool(CanvasToolbarSelection.Blue)}/>\r\n                    <EraserButton/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CanvasToolbar;","import React from 'react';\r\nimport {Curve as CurveModel} from '../models/DrawModels'\r\n\r\nexport interface Props {\r\n    model: CurveModel\r\n}\r\nconst Curve: React.FC<Props> = (props) => {\r\n    const m = props.model\r\n    const pathChar = (i: number)  =>  { return i === 0 ? 'M' : 'L'}\r\n    const path = m.pathPoints.map((p, i) => pathChar(i) + p.x.toFixed(1) + \" \" + p.y.toFixed(1)).join(\" \")\r\n    return (\r\n        <path\r\n            id={m.id}\r\n            xmlns = 'http://www.w3.org/2000/svg'\r\n            fill = \"none\"\r\n            stroke = {m.strokeColor}\r\n            strokeWidth = {m.strokeWidth}\r\n            d= {path}\r\n        >\r\n        </path>\r\n    )\r\n}\r\n\r\nexport default Curve","import React from 'react'\r\nimport {Figure as FigureModel} from '../models/DrawModels'\r\nimport Curve from './Curve'\r\n\r\nexport interface Props {\r\n    model: FigureModel\r\n}\r\nconst Figure: React.FC<Props> = (props) => {\r\n    const m = props.model\r\n\r\n    return (\r\n        <g\r\n            id={m.id}\r\n            x={m.offset.x}\r\n            y={m.offset.y}\r\n        >\r\n            {m.curves.map((c, i) =>\r\n                <Curve model={c} key={i}/>\r\n            )}\r\n        </g>\r\n    )\r\n}\r\n\r\nexport default Figure","import React, { useRef } from 'react'\r\nimport CSS from 'csstype'\r\nimport {Figure as FigureModel, Point} from '../models/DrawModels'\r\nimport  Figure  from './Figure'\r\n\r\n\r\nexport interface Props {\r\n    figures: FigureModel[]\r\n    mouseHandler: MouseHandler\r\n}\r\n\r\nexport interface MouseHandler {\r\n    MouseDown: (p: Point) => void\r\n    MouseMove: (p: Point) => void\r\n    MouseUp: (p: Point) => void\r\n}\r\nconst DrawingCanvas: React.FC<Props> = (props) => {\r\n\r\n    const svgParentStyles: CSS.Properties = {\r\n        overflow: 'hidden'\r\n    };\r\n\r\n    const boundRef = useRef<HTMLElement>(null);\r\n\r\n    const getMousePosition = (e: React.MouseEvent) =>   {\r\n        const bounds = boundRef.current;\r\n        if (!bounds)\r\n            return {x: 0, y: 0};\r\n\r\n        const rect = bounds.getBoundingClientRect();\r\n\r\n        return {\r\n            x: e.pageX - rect.left,\r\n            y: e.pageY - rect.top\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"svgParent\" className=\"flexAlignCenter\" style={svgParentStyles}>\r\n            <main id=\"svg\"\r\n                  ref={boundRef}\r\n                  aria-label=\"Whiteboard Canvas. Capture your ideas and collaborate with others\"\r\n                  >\r\n                <svg aria-hidden=\"true\"\r\n                     onMouseDown={(e) => props.mouseHandler.MouseDown(getMousePosition(e))}\r\n                     onMouseMove={(e) => props.mouseHandler.MouseMove(getMousePosition(e))}\r\n                     onMouseUp={(e) => props.mouseHandler.MouseUp(getMousePosition(e))}\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                    //  viewBox=\"0 0 1000 1000\"\r\n                     height=\"1000\"\r\n                     width=\"1000\">\r\n                    <g id=\"canvas-decorators\">\r\n                        <circle cx=\"0\" cy=\"0\" r=\"40\" fill=\"rgba(0,105,191,1)\" />\r\n                        <circle cx=\"0%\" cy=\"100%\" r=\"40\" fill=\"rgba(0,105,191,1)\" />\r\n                        <circle cx=\"100%\" cy=\"0%\" r=\"40\" fill=\"rgba(0,105,191,1)\" />\r\n                        <circle cx=\"100%\" cy=\"100%\" r=\"40\" fill=\"rgba(0,105,191,1)\" />\r\n                    </g>\r\n                    <g id=\"canvas-figures\">\r\n                        {props.figures.map((f, i) =>\r\n                            <Figure key={i} model={f}/>\r\n                        )}\r\n                    </g>\r\n                </svg>\r\n            </main>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DrawingCanvas;\r\n","import React from 'react';\r\n\r\nexport interface Props {\r\n    smoothWindow: number\r\n    smoothWindowChanged: (window: number) => void\r\n}\r\n\r\nconst SmoothEnhancement: React.FC<Props> = (props) => {\r\n\r\nreturn (\r\n    <React.Fragment>\r\n        <h3>Smoothing</h3>\r\n        <p>Simplifies the line by averaging specified number of points.</p>\r\n\r\n    <div id=\"divSmoothingFactor\">\r\n        <label htmlFor=\"cmbBufferSize\">Buffer size:</label>\r\n        <select id=\"cmbBufferSize\" value={props.smoothWindow} onChange={(e) => props.smoothWindowChanged(parseInt(e.target.value))}>\r\n            <option value=\"1\">1 - No smoothing</option>\r\n            <option value=\"4\">4 - Sharp curves</option>\r\n            <option value=\"8\">8 - Smooth curves</option>\r\n            <option value=\"12\">12 - Very smooth curves</option>\r\n            <option value=\"16\">16 - Super smooth curves</option>\r\n            <option value=\"20\">20 - Hyper smooth curves</option>\r\n        </select>\r\n    </div>\r\n    </React.Fragment>\r\n)};\r\n\r\n\r\nexport default SmoothEnhancement;","import React from 'react';\r\n\r\nexport interface Props {\r\n    predictions: string[]\r\n}\r\n\r\nconst PredictEnhancement: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h3>Recognize the drawing</h3>\r\n            <p>Draw any figure (mug, apple, cat, mosquito, house) using one ink pen color:</p>\r\n            <ul>\r\n                {props.predictions.slice(0, 5).map((s, i) => {\r\n                    return <li key={i}>{s}</li>;\r\n                })}\r\n            </ul>\r\n        </React.Fragment>\r\n    )};\r\n\r\n\r\nexport default PredictEnhancement;","import React from 'react';\r\nimport SmoothEnhancement from './SmoothEnhancement';\r\nimport PredictEnhancement from './PredictEnhancement';\r\n\r\n\r\nexport interface Props {\r\n    smoothWindow: number\r\n    smoothWindowChanged: (window: number) => void\r\n    predictions: string[]\r\n}\r\n\r\nconst EnhancementTabs: React.FC<Props> = (props) => {\r\n\r\n    const onTabClick = (e: React.MouseEvent<HTMLButtonElement>, tabName: string) => {\r\n        const tabContent = document.getElementsByClassName(\"tabcontent\");\r\n        for (let i = 0; i < tabContent.length; i++) {\r\n            const tab = tabContent[i] as HTMLDivElement\r\n            tab.setAttribute(\"style\", \"display=none\");\r\n        }\r\n        const tabLinks = document.getElementsByClassName(\"tablinks\");\r\n        for (let i = 0; i < tabLinks.length; i++) {\r\n          tabLinks[i].className = tabLinks[i].className.replace(\" active\", \"\");\r\n        }\r\n        document.getElementById(tabName)?.setAttribute(\"style\", \"display: block\")\r\n        e.currentTarget.className += \" active\";\r\n    }\r\n\r\n    return (\r\n        <div id=\"footer\">\r\n            <p>There are some tabs below with whiteboard drawing enhancements:</p>\r\n\r\n            <div className=\"tab\">\r\n            <button className=\"tablinks\" onClick={(e) => onTabClick(e, \"simplify\")}>Smooth</button>\r\n            <button className=\"tablinks\" onClick={(e) => onTabClick(e, \"predict\")}>Predict</button>\r\n            <button className=\"tablinks\" onClick={(e) => onTabClick(e, \"shape\")}>Autoshape</button>\r\n            </div>\r\n\r\n            <div id=\"simplify\" className=\"tabcontent\">\r\n                <SmoothEnhancement smoothWindow={props.smoothWindow} smoothWindowChanged={props.smoothWindowChanged}/>\r\n            </div>\r\n\r\n            <div id=\"predict\" className=\"tabcontent\">\r\n                <PredictEnhancement predictions={props.predictions} />\r\n            </div>\r\n\r\n            <div id=\"shape\" className=\"tabcontent\">\r\n                <PredictEnhancement predictions={props.predictions} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default EnhancementTabs;","import React, {useEffect, useState} from 'react';\nimport CanvasToolbar from './CanvasToolbar';\nimport DrawingCanvas, {MouseHandler} from './DrawingCanvas';\nimport EnhancementTabs from './EnhancementTabs';\nimport '../App.css';\nimport {CanvasToolbarSelection, Point} from \"../models/DrawModels\";\nimport {ApplicationAction, applicationMsg, CanvasAction} from \"../actions/Actions\";\nimport {ApplicationState} from \"../reducers/Reducers\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nexport default function App() {\n  const [smoothWindow, setSmoothWindow] = React.useState(1);\n\n  const toolSelected = useSelector((state: ApplicationState) => state.canvas.toolSelected)\n  const figures = useSelector((state: ApplicationState) => state.canvas.figures)\n  const predictions = useSelector((state: ApplicationState) => state.predictions.quickDraw.topMatches)\n  const dispatch = useDispatch()\n  const [isStarted] = useState(false)\n\n  useEffect(() => {\n    if (!isStarted) {\n      dispatch(applicationMsg(ApplicationAction.StartApplication, {}))\n    }\n  },    // having readonly dependency ensures that effect will run only on componentDidMount and not on every updates.\n      [isStarted, dispatch])\n\n\n  const selectTool = (tool: CanvasToolbarSelection) => {\n    dispatch( {\n      type: CanvasAction.ToolSelected,\n      payload: { tool: tool }\n    })\n  };\n\n  const mouseHandler : MouseHandler = {\n    MouseDown(p: Point): void {\n      dispatch( {\n        type: CanvasAction.CanvasMouseDown,\n        payload: {point: p }\n      })\n    },\n\n    MouseMove(p: Point): void {\n      dispatch( {\n        type: CanvasAction.CanvasMouseMove,\n        payload: {point: p }\n      })\n    },\n\n    MouseUp(p: Point): void {\n      dispatch( {\n        type: CanvasAction.CanvasMouseUp,\n        payload: {point: p }\n      })\n    }\n  }\n\n\n  return (\n      <div className=\"App\">\n        <CanvasToolbar currentTool={toolSelected} selectTool={tool => selectTool(tool)}/>\n        <DrawingCanvas figures={figures} mouseHandler={mouseHandler}/>\n        <EnhancementTabs smoothWindow={smoothWindow} smoothWindowChanged={(n: number) => setSmoothWindow(n)}\n                         predictions={predictions}/>\n      </div>\n  );\n}\n\n","import {InkDraw, Point, TemporalPoint} from \"../models/DrawModels\";\r\n\r\nexport class InkDrawSmoothReducer {\r\n\r\n    private static appendToSmoothingBuffer = (p: Point, model: InkDraw): InkDraw => {\r\n\r\n        let buffer = [...model.smoothingBuffer, { ...p, timespan: Date.now() - model.startedAt}];\r\n        if (buffer.length > model.smoothFactor) {\r\n            buffer.shift();\r\n        }\r\n\r\n        return {\r\n            ...model,\r\n            smoothingBuffer: buffer\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate the average point, starting at offset in the smooth window in buffer\r\n     */\r\n    private static getAveragePoint = (offset: number, model: InkDraw) : TemporalPoint | null => {\r\n\r\n        const smoothCount = model.smoothingBuffer.length;\r\n        if (smoothCount % 2 === 1 || smoothCount >= model.smoothFactor) {\r\n            let totalX = 0;\r\n            let totalY = 0;\r\n            let totalTime = 0;\r\n            let pt, i;\r\n            let count = 0;\r\n            for (i = offset; i < smoothCount; i++) {\r\n                count++;\r\n                pt = model.smoothingBuffer[i];\r\n                totalX += pt.x;\r\n                totalY += pt.y;\r\n                totalTime += pt.timespan\r\n            }\r\n            return {\r\n                x: totalX / count,\r\n                y: totalY / count,\r\n                timespan: totalTime / count\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private static updateVisiblePoints = (model: InkDraw): InkDraw =>  {\r\n        let p = InkDrawSmoothReducer.getAveragePoint(0, model);\r\n\r\n        if (p) {\r\n            // append to the smoothed part of the path that will not change\r\n            const committedPoints = [...model.committedPoints, p];\r\n\r\n            // Get the last part of the path (close to the current mouse position)\r\n            // This part will change if the mouse moves again\r\n            const extrapolated : TemporalPoint[] = [];\r\n            for (let offset = 2; offset < model.smoothingBuffer.length; offset += 2) {\r\n                p = InkDrawSmoothReducer.getAveragePoint(offset, model)\r\n                if (p != null)\r\n                    extrapolated.push(p);\r\n            }\r\n\r\n            return {\r\n                ...model,\r\n                projectedPoints: [...committedPoints, ...extrapolated],\r\n                committedPoints: committedPoints\r\n            }\r\n        }\r\n\r\n        return model\r\n    }\r\n\r\n    public static mouseDown = (model: InkDraw, p: Point): InkDraw => {\r\n        model = {\r\n            ...model,\r\n            smoothingBuffer: [],\r\n            projectedPoints: [],\r\n            committedPoints: [],\r\n            startedAt: Date.now(),\r\n            tracking:  true\r\n        }\r\n\r\n        model = InkDrawSmoothReducer.appendToSmoothingBuffer(p, model);\r\n        InkDrawSmoothReducer.updateVisiblePoints(model);\r\n\r\n        return {\r\n            ...model,\r\n        }\r\n    };\r\n\r\n    public static mouseMove = (model: InkDraw, p: Point): InkDraw => {\r\n        if (model.tracking) {\r\n            model = InkDrawSmoothReducer.appendToSmoothingBuffer(p, model);\r\n            model = InkDrawSmoothReducer.updateVisiblePoints(model);\r\n        }\r\n        return model;\r\n    };\r\n\r\n    public static mouseUp = (model: InkDraw, _: Point): InkDraw => {\r\n        return {\r\n            ...model,\r\n            tracking: false\r\n        }\r\n    };\r\n\r\n\r\n\r\n}\r\n\r\n","import {\r\n    CanvasAction,\r\n    CanvasActions,\r\n    PredictionAction,\r\n    PredictionActions,\r\n    AllActions,\r\n    ApplicationAction, applicationMsg, HasInducedActions\r\n} from \"../actions/Actions\";\r\nimport {Canvas, Curve, initialCanvas, Figure, Point, TemporalPoint, CanvasToolbarSelection} from \"../models/DrawModels\";\r\nimport {DefaultPredictions, Predictions} from \"../models/PredictModels\";\r\nimport {InkDrawSmoothReducer} from \"./InkDrawSmoothReducer\";\r\nimport {Reducer, Action} from \"redux\";\r\n\r\n\r\nexport const predictionsReducer = (state: Predictions, action: PredictionActions) : Predictions => {\r\n    switch (action.type) {\r\n        case PredictionAction.QuickDrawPredictionReceived:\r\n            return {\r\n                ...state,\r\n                quickDraw:  {\r\n                    topMatches: action.payload\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst createNewFigure = (id: number) : Figure => {\r\n    return {\r\n        id: \"Fig\" + id,\r\n        offset: {x: 0, y: 0},\r\n        curves: [],\r\n        curveTimes: []\r\n    }\r\n};\r\n\r\nconst isPen = (tool: CanvasToolbarSelection) => {\r\n    switch (tool) {\r\n        case CanvasToolbarSelection.Black:\r\n        case CanvasToolbarSelection.Blue:\r\n        case CanvasToolbarSelection.Green:\r\n        case CanvasToolbarSelection.Red:\r\n            return true\r\n        default:\r\n            return false\r\n    }\r\n}\r\n\r\nconst selectTool = (state: Canvas, newTool: CanvasToolbarSelection) => {\r\n    let figures = state.figures;\r\n    let figureIdentifier = state.figureIdentifier;\r\n\r\n    if (isPen(newTool)) {\r\n        figureIdentifier = state.figureIdentifier + 1\r\n        figures = [...state.figures, createNewFigure(state.figureIdentifier)]\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        toolSelected: newTool,\r\n        figureIdentifier: figureIdentifier,\r\n        figures: figures\r\n    };\r\n};\r\n\r\nconst penColor = (toolSelected: CanvasToolbarSelection) => {\r\n    switch (toolSelected) {\r\n        case CanvasToolbarSelection.Black: return \"black\"\r\n        case CanvasToolbarSelection.Blue: return \"blue\"\r\n        case CanvasToolbarSelection.Green: return \"green\"\r\n        case CanvasToolbarSelection.Red: return \"red\"\r\n\r\n        default: return \"black\"\r\n    }\r\n}\r\n\r\nconst startNewCurve = (figures: Figure[], startedAt: number, toolSelected: CanvasToolbarSelection, projectedPoints: TemporalPoint[]) : Figure[] => {\r\n    const lastFigure = figures.pop()!;\r\n\r\n    const curve : Curve = {\r\n        startedAt: startedAt,\r\n        id: \"Crv\" + (lastFigure.curves.length + 1).toString(),\r\n        pathPoints: [],\r\n        strokeColor: penColor(toolSelected),\r\n        strokeWidth: 3\r\n    }\r\n\r\n    curve.pathPoints = [...projectedPoints]\r\n    return [...figures, {...lastFigure, curves: [...lastFigure.curves, curve]}]\r\n}\r\n\r\n\r\nconst mouseDown = (state: Canvas, point: Point): Canvas => {\r\n\r\n    if (!isPen(state.toolSelected))\r\n        return state\r\n\r\n    const inkDraw = InkDrawSmoothReducer.mouseDown(state.inkDraw, point);\r\n    const figures = startNewCurve(state.figures, inkDraw.startedAt, state.toolSelected, inkDraw.projectedPoints);\r\n\r\n    return {...state,\r\n        inkDraw: inkDraw,\r\n        figures: figures\r\n    }\r\n}\r\n\r\nconst updateRecentCurveWithInkDrawing = (figures: Figure[], projectedPoints: TemporalPoint[]): Figure[] => {\r\n    const lastFigure = figures.pop()!\r\n    let curves = lastFigure.curves;\r\n    const lastCurve : Curve = curves.pop()!\r\n    lastCurve.pathPoints = [...projectedPoints]\r\n    return [...figures, {...lastFigure, curves: [...curves, lastCurve]}]\r\n}\r\n\r\n\r\nconst mouseMove = (state: Canvas, point: Point): Canvas => {\r\n    if (!isPen(state.toolSelected) || !state.inkDraw.tracking)\r\n        return state\r\n\r\n    const inkDraw = InkDrawSmoothReducer.mouseMove(state.inkDraw, point)\r\n    return {\r\n        ...state,\r\n        inkDraw: inkDraw,\r\n        figures: updateRecentCurveWithInkDrawing(state.figures, state.inkDraw.projectedPoints)\r\n    }\r\n}\r\nconst mouseUp = (state: Canvas, point: Point, events: Action[]): Canvas => {\r\n    if (!isPen(state.toolSelected))\r\n        return state\r\n\r\n    const inkDraw = InkDrawSmoothReducer.mouseUp(state.inkDraw, point)\r\n    const figures = updateRecentCurveWithInkDrawing(state.figures, state.inkDraw.projectedPoints);\r\n\r\n    const figure = figures[figures.length-1]\r\n    const curve = figure.curves[figure.curves.length-1]\r\n    const action = applicationMsg(ApplicationAction.CurveCompleted, {figureId: figure.id, curveId: curve.id});\r\n    events.push(action)\r\n\r\n    return {\r\n        ...state,\r\n        inkDraw: inkDraw,\r\n        figures: figures\r\n    }\r\n}\r\n\r\n\r\nexport const canvasReducer = (state: Canvas, action: CanvasActions, events: Action[]): Canvas => {\r\n    switch (action.type) {\r\n        case CanvasAction.ToolSelected:\r\n            return selectTool(state, action.payload.tool)\r\n        case CanvasAction.CanvasMouseDown:\r\n            return mouseDown(state, action.payload.point)\r\n        case CanvasAction.CanvasMouseMove:\r\n            return mouseMove(state, action.payload.point)\r\n        case CanvasAction.CanvasMouseUp:\r\n            return mouseUp(state, action.payload.point, events)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport interface ApplicationState {\r\n    canvas: Canvas\r\n    predictions: Predictions\r\n}\r\n\r\nexport const initialState : ApplicationState = {\r\n    canvas: initialCanvas,\r\n    predictions: DefaultPredictions\r\n}\r\n\r\nexport const rootReducer : Reducer<ApplicationState, AllActions> = (state = initialState, action) => {\r\n    let events: Action[] = [];\r\n    const newVar = {\r\n        predictions: predictionsReducer(state.predictions, action as PredictionActions),\r\n        canvas: canvasReducer(state.canvas, action as CanvasActions, events)\r\n    } as ApplicationState;\r\n\r\n    const asyncDispatch = (action as any as HasInducedActions).asyncDispatch;\r\n    if (asyncDispatch)\r\n        asyncDispatch(events);\r\n\r\n    return newVar\r\n}\r\n\r\n\r\n\r\n","export interface QuickdrawPredictions {\r\n    topMatches: string[]\r\n}\r\n\r\nexport interface BasicShapePredictions {\r\n    shape: string\r\n}\r\n\r\nexport interface Predictions {\r\n    quickDraw: QuickdrawPredictions\r\n    basicShape: BasicShapePredictions\r\n}\r\n\r\nexport const DefaultPredictions: Predictions = {\r\n    quickDraw: { topMatches: [] },\r\n    basicShape: {shape: ''}\r\n}\r\n\r\n","import {Figure, TemporalPoint} from \"../models/DrawModels\";\r\n\r\nexport const inkPayload = (width: number, height: number, figure: Figure) => {\r\n    let curves: TemporalPoint[][] = []\r\n    for (const curve of figure.curves) {\r\n        curves.push(curve.pathPoints.map((p) => ({\r\n            ...p,\r\n            timespan: p.timespan + curve.startedAt - figure.curves[0].startedAt\r\n        } as TemporalPoint)))\r\n    }\r\n\r\n    return {\r\n        input_type: 0,\r\n        requests: [\r\n            {\r\n                language: \"quickdraw\",\r\n                writing_guide: { width: width, height: height},\r\n                ink: curves.map(c => [\r\n                    c.map(v => v.x),\r\n                    c.map(v => v.y),\r\n                    c.map(v => v.timespan)\r\n                ])\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nexport const fetchQuickDrawSuggestions = (width: number, height: number, figure: Figure) => {\r\n    const url = 'https://inputtools.google.com/request?ime=handwriting&app=quickdraw&dbg=1&cs=1&oe=UTF-8';\r\n        return fetch(url, {\r\n            method: \"POST\",\r\n/*\r\n            mode: \"cors\",\r\n            cache: \"no-cache\",\r\n            redirect: \"follow\",\r\n*/\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(inkPayload(width, height, figure))\r\n        })\r\n}\r\n\r\n","import { put, takeEvery, select } from 'redux-saga/effects';\r\nimport {\r\n    ApplicationAction,\r\n    ApplicationActions,\r\n    CanvasAction,\r\n    canvasMsg,\r\n    PredictionAction,\r\n    predictionMsg\r\n} from \"../actions/Actions\";\r\nimport {CanvasToolbarSelection} from \"../models/DrawModels\";\r\nimport {fetchQuickDrawSuggestions} from \"../api/InputTools\";\r\nimport {ApplicationState} from \"../reducers/Reducers\";\r\n\r\nconst figureById = (state: ApplicationState, figureId: string) => state.canvas.figures.find(value => value.id === figureId)!\r\n\r\nfunction* curveCompleted(action: ApplicationActions) {\r\n    if (action.type === ApplicationAction.CurveCompleted) {\r\n        const {figureId} = action.payload\r\n        const figure: ReturnType<typeof figureById> = yield select(figureById, figureId)\r\n\r\n        const response = yield fetchQuickDrawSuggestions(1000, 1000, figure).then(r => r.json())\r\n        const predictions = response[1][0][1]\r\n        yield put(predictionMsg(PredictionAction.QuickDrawPredictionReceived, predictions))\r\n    }\r\n}\r\n\r\nexport function* startApplicationSaga() {\r\n    // Set tool to black ink on startup. Later we can load last tool from config\r\n    yield put( canvasMsg(CanvasAction.ToolSelected, { tool: CanvasToolbarSelection.Black}))\r\n\r\n    // yield put() show demo\r\n\r\n    yield takeEvery(ApplicationAction.CurveCompleted, curveCompleted);\r\n}\r\n\r\n","import { takeEvery} from 'redux-saga/effects';\r\nimport {ApplicationAction} from \"../actions/Actions\";\r\nimport {startApplicationSaga} from \"./StartAppSaga\";\r\n\r\nexport function* rootSaga() {\r\n    yield takeEvery(ApplicationAction.StartApplication, startApplicationSaga)\r\n}\r\n\r\n\r\n/*\r\n// Event iterator\r\nfunction events(target, event) {\r\n    let fns = [], handler = e => {\r\n        fns.forEach(fn => fn(null, e));\r\n        fns = [];\r\n    };\r\n    target.addEventListener(event, handler);\r\n\r\n    return {\r\n        next(fn) {\r\n            fns.push(fn);\r\n        },\r\n        dispose(){\r\n            target.removeEventListener(event, handler);\r\n            fns = handler = null;\r\n        }\r\n    }\r\n}\r\n\r\nfunction * draw(){\r\n    while(true){\r\n        // wait until mousedown event\r\n        let e = yield take('mousedown');\r\n        e.payload.preventDefault();\r\n        e.payload.stopPropagation();\r\n\r\n\r\n        // start listening to mousemove and mouseup events\r\n        let up$ = events(window, 'mouseup');\r\n        let move$ = events(window, 'mousemove');\r\n\r\n\r\n        while(true){\r\n            let {move} = yield race({\r\n                up: cps(up$.next),\r\n                move: cps(move$.next)\r\n            });\r\n\r\n            if(move){\r\n                move.preventDefault();\r\n                move.stopPropagation();\r\n                let {pageX, pageY} = move;\r\n                yield setState({pageX, pageY});\r\n            }\r\n            else break;\r\n        }\r\n\r\n        // cleanup\r\n        up$.dispose();\r\n        move$.dispose();\r\n    }\r\n\r\n}*/\r\n","import createSagaMiddleware from \"redux-saga\";\r\nimport {Action, applyMiddleware, compose, createStore, Middleware, StoreEnhancer} from \"redux\";\r\nimport {initialState, rootReducer} from \"../reducers/Reducers\";\r\nimport {rootSaga} from \"../sagas/RootSaga\";\r\nimport {Saga} from \"@redux-saga/types\";\r\n\r\nconst sagaMiddle = createSagaMiddleware();\r\n\r\nconst sagaEnhancer = applyMiddleware(sagaMiddle);\r\n\r\nfunction asyncDispatchMiddleware(): Middleware {\r\n    return store => next => action =>\r\n    {\r\n        let syncActivityFinished = false;\r\n        let actionQueue: Action[] = [];\r\n\r\n        function flushQueue() {\r\n            actionQueue.forEach(a => store.dispatch(a)); // flush queue\r\n            actionQueue = [];\r\n        }\r\n\r\n        function asyncDispatch(actions: Action[]) {\r\n            actionQueue = actionQueue.concat(actions);\r\n\r\n            if (syncActivityFinished) {\r\n                flushQueue();\r\n            }\r\n        }\r\n\r\n        const actionWithAsyncDispatch =\r\n            Object.assign({}, action, {asyncDispatch});\r\n\r\n        const result = next(actionWithAsyncDispatch);\r\n        syncActivityFinished = true;\r\n        flushQueue();\r\n        return result\r\n    }\r\n}\r\n\r\n\r\nconst asyncDispatchEnhancer = applyMiddleware(asyncDispatchMiddleware());\r\n\r\n\r\nconst enhancers = [sagaEnhancer]\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    const devToolsExtension = (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\r\n    if (typeof devToolsExtension === 'function') {\r\n        enhancers.push(devToolsExtension)\r\n    }\r\n}\r\n\r\nconst composedEnhancers = compose(asyncDispatchEnhancer, ...enhancers)\r\n\r\nexport const store = createStore(rootReducer, initialState, composedEnhancers as StoreEnhancer);\r\n\r\nsagaMiddle.run(rootSaga);\r\n\r\nexport const runSaga = <S extends Saga>(saga: S, ...args: Parameters<S>) => {\r\n    if (!sagaMiddle) {\r\n        console.warn('sage middleware should be initialized first');\r\n        return;\r\n    }\r\n    return sagaMiddle.run(saga, ...args);\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport {store} from \"./services/Store\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root') as HTMLElement)\n"],"sourceRoot":""}